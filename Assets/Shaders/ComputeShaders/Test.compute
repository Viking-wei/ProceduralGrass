// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define THREADS_PER_GROUP 64

struct Boids
{
    float3 Position;
    float3 Direction;
};

RWStructuredBuffer<Boids> BoidsBuffer;
float deltaTime;
float3 flockPosition;
uint boidsCount;
float neighbourDistance;
float boidsSpeed;

[numthreads(THREADS_PER_GROUP,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    Boids boids= BoidsBuffer[id.x];
    float3 separation = 0;
    float3 alignment = 0;
    float3 cohesion = flockPosition;
    uint nearbyCount = 1;
    
    for(uint i=0;i<boidsCount;++i)
    {
        if(i==id.x)
         continue;
        Boids tempBoids = BoidsBuffer[i];
        float3 tempPosition=tempBoids.Position;
        float3 offset=boids.Position-tempPosition;
        float distance=max(length(offset),0.0001);

        if (distance < neighbourDistance)
        {
            // 两个 boid 越接近，产生的 separation 越大
            separation += offset * (1.0 / distance - 1.0 / neighbourDistance);
            alignment += BoidsBuffer[i].Direction;
            cohesion += tempPosition;

            nearbyCount += 1;
        }
    }
    
    float avg = 1.0 / nearbyCount;
    alignment *= avg;
    cohesion *= avg;
    cohesion = normalize(cohesion - boids.Position);
    float3 direction = alignment + separation + cohesion;
    boids.Direction = lerp(direction, normalize(boids.Direction), 0.94);
    boids.Position += boids.Direction * boidsSpeed * deltaTime;
    
    BoidsBuffer[id.x]=boids;
}
